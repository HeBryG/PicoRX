// ---------------------------------------------------------------- //
// This file is autogenerated by pioasm version 2.2.0; do not edit! //
// ---------------------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----- //
// keyer //
// ----- //

#define keyer_wrap_target 0
#define keyer_wrap 7
#define keyer_pio_version 0

static const uint16_t keyer_program_instructions[] = {
            //     .wrap_target
    0x4002, //  0: in     pins, 2
    0xa026, //  1: mov    x, isr
    0xe04a, //  2: set    y, 10
    0x0083, //  3: jmp    y--, 3
    0x4002, //  4: in     pins, 2
    0xa046, //  5: mov    y, isr
    0x00a0, //  6: jmp    x != y, 0
    0x8020, //  7: push   block
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program keyer_program = {
    .instructions = keyer_program_instructions,
    .length = 8,
    .origin = -1,
    .pio_version = keyer_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config keyer_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + keyer_wrap_target, offset + keyer_wrap);
    return c;
}

#include "hardware/pio.h"
#include "hardware/clocks.h"
#include "hardware/gpio.h"
// Initialize the keyer PIO program
// Corrected C-SDK initialization
static inline void keyer_program_init(PIO pio, uint sm, uint offset, uint pin_base) {
    // get default config
    pio_sm_config c = keyer_program_get_default_config(offset);
    // setup input pins
    pio_sm_set_consecutive_pindirs(pio, sm, pin_base, 2, false);
    gpio_pull_up(pin_base);
    gpio_pull_up(pin_base + 1);
    // configure SM to read from the specified pins
    sm_config_set_in_pins(&c, pin_base);
    // enable autopush after 2 bits (since we read 2 bits with 'in pins, 2')
    sm_config_set_in_shift(&c, false, true, 2);
    // initialize and enable
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
// Fetch a keyer event from RX FIFO (blocking)
static inline uint8_t keyer_program_get_event(PIO pio, uint sm) {
    while (pio_sm_is_rx_fifo_empty(pio, sm)) {
        tight_loop_contents();
    }
    return pio_sm_get(pio, sm) & 0x3;  // only two bits
}

#endif

